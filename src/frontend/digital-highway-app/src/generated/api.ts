/* tslint:disable */
/* eslint-disable */
/**
 * digital-highway-api
 * API contract for the DigitalHighway service
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HighwayMetadataDto
 */
export interface HighwayMetadataDto {
    /**
     * 
     * @type {string}
     * @memberof HighwayMetadataDto
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof HighwayMetadataDto
     */
    'tracksCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof HighwayMetadataDto
     */
    'totalDistance'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof HighwayMetadataDto
     */
    'points'?: Array<number>;
}
/**
 * 
 * @export
 * @interface HighwayMetadataListResponse
 */
export interface HighwayMetadataListResponse {
    /**
     * 
     * @type {Array<HighwayMetadataDto>}
     * @memberof HighwayMetadataListResponse
     */
    'data'?: Array<HighwayMetadataDto>;
}
/**
 * 
 * @export
 * @interface HighwayPartDto
 */
export interface HighwayPartDto {
    /**
     * 
     * @type {number}
     * @memberof HighwayPartDto
     */
    'order'?: number;
    /**
     * 
     * @type {TrackDto}
     * @memberof HighwayPartDto
     */
    'track'?: TrackDto;
}
/**
 * 
 * @export
 * @interface HighwayResponse
 */
export interface HighwayResponse {
    /**
     * 
     * @type {string}
     * @memberof HighwayResponse
     */
    'id'?: string;
    /**
     * 
     * @type {Array<HighwayPartDto>}
     * @memberof HighwayResponse
     */
    'parts'?: Array<HighwayPartDto>;
}
/**
 * Contains error information
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Error text
     * @type {string}
     * @memberof ModelError
     */
    'description': string;
    /**
     * Error details
     * @type {string}
     * @memberof ModelError
     */
    'details'?: string;
}
/**
 * 
 * @export
 * @interface PointDto
 */
export interface PointDto {
    /**
     * 
     * @type {string}
     * @memberof PointDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof PointDto
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof PointDto
     */
    'height'?: number;
}
/**
 * Request processing result
 * @export
 * @interface Response
 */
export interface Response {
    /**
     * Response body
     * @type {object}
     * @memberof Response
     */
    'data'?: object;
    /**
     * 
     * @type {Array<Error>}
     * @memberof Response
     */
    'errors'?: Array<Error>;
}
/**
 * 
 * @export
 * @interface TrackDto
 */
export interface TrackDto {
    /**
     * 
     * @type {string}
     * @memberof TrackDto
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof TrackDto
     */
    'distance'?: number;
    /**
     * 
     * @type {number}
     * @memberof TrackDto
     */
    'surfaceType'?: number;
    /**
     * 
     * @type {number}
     * @memberof TrackDto
     */
    'maxSpeed'?: number;
    /**
     * 
     * @type {PointDto}
     * @memberof TrackDto
     */
    'startPoint'?: PointDto;
    /**
     * 
     * @type {PointDto}
     * @memberof TrackDto
     */
    'endPoint'?: PointDto;
}

/**
 * HighwayApi - axios parameter creator
 * @export
 */
export const HighwayApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retruns information about highway (include tracks and its points)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHighwayById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getHighwayById', 'id', id)
            const localVarPath = `/highway/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HighwayApi - functional programming interface
 * @export
 */
export const HighwayApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HighwayApiAxiosParamCreator(configuration)
    return {
        /**
         * Retruns information about highway (include tracks and its points)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHighwayById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HighwayResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHighwayById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HighwayApi.getHighwayById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HighwayApi - factory interface
 * @export
 */
export const HighwayApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HighwayApiFp(configuration)
    return {
        /**
         * Retruns information about highway (include tracks and its points)
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHighwayById(id: string, options?: any): AxiosPromise<HighwayResponse> {
            return localVarFp.getHighwayById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HighwayApi - object-oriented interface
 * @export
 * @class HighwayApi
 * @extends {BaseAPI}
 */
export class HighwayApi extends BaseAPI {
    /**
     * Retruns information about highway (include tracks and its points)
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HighwayApi
     */
    public getHighwayById(id: string, options?: RawAxiosRequestConfig) {
        return HighwayApiFp(this.configuration).getHighwayById(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HighwayMetadataApi - axios parameter creator
 * @export
 */
export const HighwayMetadataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns highways metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHighwaysMetadata: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/highway/metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HighwayMetadataApi - functional programming interface
 * @export
 */
export const HighwayMetadataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HighwayMetadataApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns highways metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHighwaysMetadata(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HighwayMetadataListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHighwaysMetadata(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HighwayMetadataApi.getHighwaysMetadata']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HighwayMetadataApi - factory interface
 * @export
 */
export const HighwayMetadataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HighwayMetadataApiFp(configuration)
    return {
        /**
         * Returns highways metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHighwaysMetadata(options?: any): AxiosPromise<HighwayMetadataListResponse> {
            return localVarFp.getHighwaysMetadata(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HighwayMetadataApi - object-oriented interface
 * @export
 * @class HighwayMetadataApi
 * @extends {BaseAPI}
 */
export class HighwayMetadataApi extends BaseAPI {
    /**
     * Returns highways metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HighwayMetadataApi
     */
    public getHighwaysMetadata(options?: RawAxiosRequestConfig) {
        return HighwayMetadataApiFp(this.configuration).getHighwaysMetadata(options).then((request) => request(this.axios, this.basePath));
    }
}



